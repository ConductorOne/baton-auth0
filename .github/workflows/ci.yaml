name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.22.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: go test -v -covermode=count -json ./... > test.json
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      BATON_AUTH0_BASE_URL: "https://dev-n8a8p1kmt7k0ebdz.us.auth0.com"
      BATON_AUTH0_CLIENT_ID: EiajnMCHSnpjNdhAtQZ3SkG2cxE7JGII
      BATON_AUTH0_CLIENT_SECRET: ${{ secrets.BATON_AUTH0_CLIENT_SECRET }}

      CONNECTOR_GRANT: 'organization:org_TcURzPaMeezOd7N4:member:user:auth0|6722c078392d928041854a20'
      CONNECTOR_ENTITLEMENT: 'entitlement:org_TcURzPaMeezOd7N4:member'
      CONNECTOR_PRINCIPAL: 'alejandro.bernal'
      CONNECTOR_PRINCIPAL_TYPE: 'user'
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: get token
        run: |
          token="$(curl -s --request POST \
            --url "$BATON_AUTH0_BASE_URL/oauth/token" \
            --header 'content-type: application/x-www-form-urlencoded' \
            --data grant_type=client_credentials \
            --data client_id="$BATON_AUTH0_CLIENT_ID" \
            --data client_secret="$BATON_AUTH0_CLIENT_SECRET" \
            --data audience="$BATON_AUTH0_BASE_URL/api/v2/" \
          | jq -r '.access_token')"
          echo "::add-mask::$token"
          echo "AUTH0_TOKEN=$token" >> $GITHUB_ENV

      - name: Build baton-auth0
        run: go build ./cmd/baton-auth0
      - name: Run baton-auth0
        run: ./baton-auth0

      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin

      - name: Get baton resources
        run: baton resources

      - name: Check for grant before revoking
        run:
          baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""

      - name: Revoke grants
        run: ./baton-auth0 --revoke-grant="${{ env.CONNECTOR_GRANT }}"

      - name: Check grant was revoked
        run: ./baton-auth0 && baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\" else . end"

      - name: Grant entitlement
        # Change the grant arguments to the correct IDs for your test data
        run: ./baton-auth0 --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"

      - name: Check grant was re-granted

        run:
          baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""

